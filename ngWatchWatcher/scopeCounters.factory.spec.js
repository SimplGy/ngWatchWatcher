// Generated by CoffeeScript 1.7.1
(function() {
  describe('scopeCounters.factory', function() {
    var $rootScope, childScope, el, scope, scopeCounters;
    scope = void 0;
    scopeCounters = void 0;
    $rootScope = void 0;
    childScope = void 0;
    el = void 0;
    beforeEach(function() {
      angular.mock.module('watchWatcher');
      return angular.mock.inject(function(_scopeCounters_, _$rootScope_, $compile) {
        scopeCounters = _scopeCounters_;
        $rootScope = _$rootScope_;
        $rootScope.$new();
        childScope = $rootScope.$new();
        childScope.$new();
        childScope.$new();
        childScope.$new();
        childScope.testVal = 'Scope is working';
        el = $compile('<div>{{testVal}}</div>')(childScope);
        return $rootScope.$digest();
      });
    });
    it('is defined', function() {
      return expect(scopeCounters).toBeDefined();
    });
    describe('test scope preparation', function() {
      it('$rootScope is available and looks like an angular scope', function() {
        expect($rootScope).toBeDefined();
        return expect(typeof $rootScope.$new).toBe('function');
      });
      return it('$rootScope has other scopes in it', function() {
        expect($rootScope.$$childHead).toBeDefined();
        return expect($rootScope.$$childHead.$$nextSibling).toBeDefined();
      });
    });
    describe('.countChildren(scope)', function() {
      it('is a function', function() {
        return expect(typeof scopeCounters.countChildren).toBe('function');
      });
      it('gets correct counts of immediate children', function() {
        expect(scopeCounters.countChildren($rootScope)).toBe(2);
        expect(scopeCounters.countChildren(childScope)).toBe(3);
        childScope.$new();
        return expect(scopeCounters.countChildren(childScope)).toBe(4);
      });
      return it("detects isolate scope", function() {
        expect(scopeCounters.countChildren(childScope)).toBe(3);
        childScope.$new(true);
        return expect(scopeCounters.countChildren(childScope)).toBe(4);
      });
    });
    describe('.byScope()', function() {
      it('is a function', function() {
        return expect(typeof scopeCounters.byScope).toBe('function');
      });
      it('finds the right number of scopes', function() {
        return expect(scopeCounters.byScope().length).toBe(6);
      });
      return it('detects the results of destorying scope', function() {
        expect(scopeCounters.byScope().length).toBe(6);
        childScope.$$childHead.$destroy();
        expect(scopeCounters.byScope().length).toBe(5);
        childScope.$destroy();
        return expect(scopeCounters.byScope().length).toBe(2);
      });
    });
    return describe('byEl', function() {
      it('is a function', function() {
        return expect(typeof scopeCounters.byEl).toBeDefined();
      });
      it('has an element to test against', function() {
        return expect(el.html()).toBe('Scope is working');
      });
      return it('Finds scopes by element', function() {
        return expect(scopeCounters.byEl(el).length).toBe(1);
      });
    });
  });

}).call(this);
