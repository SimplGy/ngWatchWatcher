// Generated by CoffeeScript 1.7.1
(function() {
  describe('watchCounters.factory', function() {
    var $rootScope, childScope, el, scope, watchCounters;
    scope = void 0;
    watchCounters = void 0;
    $rootScope = void 0;
    childScope = void 0;
    el = void 0;
    beforeEach(function() {
      angular.mock.module('watchWatcher');
      return angular.mock.inject(function(_watchCounters_, _$rootScope_, $compile) {
        watchCounters = _watchCounters_;
        $rootScope = _$rootScope_;
        $rootScope.$new();
        childScope = $rootScope.$new();
        childScope.$new();
        childScope.$new();
        $rootScope.$watch(function() {});
        $rootScope.$watch(function() {});
        childScope.testVal = 'Scope is working';
        el = $compile('<div ng-class="{ hasVal: testVal }">{{testVal}}</div>')(childScope);
        return $rootScope.$digest();
      });
    });
    it('is defined', function() {
      return expect(watchCounters).toBeDefined();
    });
    describe('test scope preparation', function() {
      it('$rootScope is available and looks like an angular scope', function() {
        expect($rootScope).toBeDefined();
        return expect(typeof $rootScope.$new).toBe('function');
      });
      return it('$rootScope has other scopes in it', function() {
        expect($rootScope.$$childHead).toBeDefined();
        return expect($rootScope.$$childHead.$$nextSibling).toBeDefined();
      });
    });
    describe('.byScope()', function() {
      it('counts the correct number of watches on a scope', function() {
        return expect(watchCounters.byScope(childScope).length).toBe(2);
      });
      return it('counts watches on the scope and all it\'s children', function() {
        return expect(watchCounters.byScope($rootScope).length).toBe(4);
      });
    });
    return describe('.byEl()', function() {
      return it('counts by element correctly', function() {
        return expect(watchCounters.byEl(el).length).toBe(2);
      });
    });
  });

}).call(this);
