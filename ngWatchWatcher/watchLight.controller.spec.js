// Generated by CoffeeScript 1.7.1
(function() {
  describe('watchLight.controller', function() {
    var controller, sleep;
    controller = void 0;
    sleep = function(amount) {
      var startTime, _results;
      amount = amount || 10;
      startTime = Date.now();
      _results = [];
      while (Date.now() - startTime < amount) {
        _results.push(startTime);
      }
      return _results;
    };
    beforeEach(function() {
      angular.mock.module('watchWatcher');
      return angular.mock.inject(function($controller) {
        return controller = $controller('WatchLightController');
      });
    });
    describe('.countWatch()', function() {
      it('Adds measurements', function() {
        expect(controller.getRecentDigests().length).toBe(0);
        controller.countWatch();
        controller.countWatch();
        controller.countWatch();
        return expect(controller.getRecentDigests().length).toBe(3);
      });
      return it('measures duration', function() {
        var lastDigest;
        expect(controller.getRecentDigests().length).toBe(0);
        controller.countWatch();
        sleep(10);
        lastDigest = controller.getRecentDigests()[0];
        expect(lastDigest).toBeDefined();
        waits(20);
        return runs(function() {
          var _ref;
          return expect((10 <= (_ref = lastDigest.duration) && _ref < 15)).toBe(true);
        });
      });
    });
    describe('.getDigestsPerSecond()', function() {
      return it('averages out digests over time', function() {
        var i, _i;
        expect(controller.getRecentDigests().length).toBe(0);
        for (i = _i = 1; _i <= 5; i = ++_i) {
          controller.countWatch();
        }
        waits(1000 / 10);
        return runs(function() {
          var _j, _ref;
          for (i = _j = 1; _j <= 5; i = ++_j) {
            controller.countWatch();
          }
          expect(controller.getRecentDigests().length).toBe(10);
          return expect((95 < (_ref = controller.getDigestsPerSecond()) && _ref < 105)).toBe(true);
        });
      });
    });
    return describe('.getAverageDigestDuration()', function() {
      it('gets the average duration of one digest', function() {
        expect(controller.getRecentDigests().length).toBe(0);
        controller.countWatch();
        sleep(50);
        waits(0);
        return runs(function() {
          var _ref;
          expect(controller.getRecentDigests().length).toBe(1);
          return expect((45 < (_ref = controller.getAverageDigestDuration()) && _ref < 55)).toBe(true);
        });
      });
      return it('gets the average duration of many digests', function() {
        expect(controller.getRecentDigests().length).toBe(0);
        waits(0);
        runs(function() {
          controller.countWatch();
          return sleep(10);
        });
        waits(0);
        runs(function() {
          controller.countWatch();
          return sleep(100);
        });
        waits(0);
        return runs(function() {
          var avg, fast, slow;
          expect(controller.getRecentDigests().length).toBe(2);
          fast = controller.getRecentDigests()[0].duration;
          slow = controller.getRecentDigests()[1].duration;
          avg = controller.getAverageDigestDuration();
          console.log("fast: " + fast + ". slow: " + slow + ", avg: " + avg);
          expect((5 < fast && fast < 15)).toBe(true);
          expect((95 < slow && slow < 120)).toBe(true);
          return expect(Math.round(avg)).toBe(Math.round((fast + slow) / 2));
        });
      });
    });
  });

}).call(this);
